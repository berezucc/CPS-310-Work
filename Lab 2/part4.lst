(ARCTools Version 2.0.2)
 HexLoc     DecLoc    MachWord   Label        Instruction                Comment
                                              .org 2048                  !Changes location counter to start at address 2048
00000800  0000002048  c2002bb8  main:         ld [3000], %r1             !Main label, loads memory address of variable a into register 1 						11 00001 000000 00000 1 0101110111000
00000804  0000002052  c4002bbc                ld [3004], %r2             !Loads memory address of variable b into register 2 							11 00010 000000 00000 1 0101110111100
00000808  0000002056  c6002bc0                ld [3008], %r3             !Loads memory address of variable c into register 3 							11 00010 000000 00000 1 0101111000000
0000080c  0000002060  80a12003  top:          subcc %r4, 3, %r0          !Top label, subtracts content from register 4 with constant 3, storing it in register 0 (discard) 	10 00000 010100 00100 1 0000000000011
00000810  0000002064  0280000a                be 10                      !When equal to zero, branches to done label 								00 0 0001 010 0000000000000000001010
00000814  0000002068  80a14006                subcc %r5, %r6, %r0        !If not, subtracts content from register 5 and register 6 into register 0 				10 00000 010100 00101 0 0000000000110
00000818  0000002072  0c800004                bneg 4                     !If subtraction raises negative flag, branches into else label 						00 0 0110 010 0000000000000000000100
0000081c  0000002076  82904002                orcc %r1, %r2, %r1         !If not, logic or operation between register 1 and 2, storing it into register 1 			10 00001 010010 00001 0 0000000000010
00000820  0000002080  8c81a001                addcc %r6, 1, %r6          !Then, adds register 6 with constant 1 into register 6 							10 00111 010000 00111 1 0000000000001
00000824  0000002084  10800003                ba 3                       !Branches always to bottom label 										00 0 1000 010 000000000000000000011
00000828  0000002088  82884003  else:         andcc %r1, %r3, %r1        !Else label, performs logic and operation between register 1 and 3 into register 1 			10 00001 010001 00001 0 0000000000011
0000082c  0000002092  8a816001                addcc %r5, 1, %r5          !Also, adds content of register 5 with constant 1, storing it into register 5 			10 00101 010000 00101 1 0000000000001
00000830  0000002096  88812001  bottom:       addcc %r4, 1, %r4          !Bottom label, performs addition of content in register 4 with constant 1 into register 4 		10 00100 010000 00100 1 0000000000001
00000834  0000002100  10bffff6                ba -10                     !Will always branch to top label 										00 0 1000 010 1111111111111111111010
00000838  0000002104  c6202bc4  done:         st %r3, [3012]             !Done label, stores content from register 3 into variable y 						11 00011 000100 00000 1 0101111000100 
0000083c  0000002108  81c3e004                jmpl %r15, 4, %r0          !Return 														10 00000 111000 01111 1 0000000000100
                                              .org 3000                  !Changes location counter to start at address 3000
00000bb8  0000003000  000000a0  a:                                       !Declare a as 0xa0 (0000000000000)
00000bbc  0000003004  00000033  b:                                       !Declare b as 0x33 (0000000110011)
00000bc0  0000003008  00000052  c:                                       !Declare c as 0x52 (0000001010010)
00000bc4  0000003012  00000002  y:                                       !Declare y as 2 (0000000000010)
                                                                         !Stops assembling

--- Symbol Table ---
bottom: 2096
main: 2048
done: 2104
c: 3008
y: 3012
else: 2088
top: 2060
b: 3004
a: 3000
